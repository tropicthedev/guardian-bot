plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    // id 'com.github.johnrengelman.shadow' version '7.0.0'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
}

//configurations {
//    // Determines shaded dependencies
//    shade
//    developmentElements {
//        extendsFrom(implementation, namedElements)
//    }
//}


dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include(implementation "io.javalin:javalin:6.2.0")
    implementation "com.google.code.gson:gson:2.10.1"

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    include(implementation 'org.xerial:sqlite-jdbc:3.46.0.0')

    // Java-WebSocket (Websocket API)
    include(implementation 'org.java-websocket:Java-WebSocket:1.5.2')

    // JDA (Discord API)
    include(implementation 'net.dv8tion:JDA:5.0.1')

    // JDA Utilities
    include("org.slf4j:slf4j-api:2.0.7")
    include("net.sf.trove4j:trove4j:3.0.3")
    include('com.squareup.okio:okio:3.9.0')
    include("com.squareup.okhttp3:okhttp:4.12.0")
    include("org.jetbrains.kotlin:kotlin-stdlib:1.8.21")
    include("org.apache.commons:commons-collections4:4.4")
    include("com.neovisionaries:nv-websocket-client:2.14")
    include("com.squareup.okio:okio-jvm:3.9.0")

    include(implementation "com.fasterxml.jackson.core:jackson-core:2.14.1")
    include(implementation "com.fasterxml.jackson.core:jackson-databind:2.14.1")
    include(implementation "com.fasterxml.jackson.core:jackson-annotations:2.14.1")

    include(implementation 'de.exlll:configlib-yaml:4.5.0')
    include('de.exlll:configlib-core:4.5.0')
    include('org.snakeyaml:snakeyaml-engine:2.7')
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}


def viteDir = "${projectDir}/client"
def viteDistDir = "${viteDir}/dist"
def modResourcesDir = "${projectDir}/src/main/resources/static" // Adjust this path if necessary

task buildVite(type: Exec) {
    workingDir viteDir
    commandLine 'C:/Program Files/nodejs/npm.cmd', 'run', 'build'
    doLast {
        println "Vite build complete."
    }
}

task copyViteBuild(type: Copy) {
    dependsOn buildVite
    from viteDistDir
    into modResourcesDir
    doLast {
        println "Copied Vite build to resources directory."
    }
}

compileJava.dependsOn(copyViteBuild)
processResources.dependsOn(copyViteBuild)


def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

build.dependsOn copyViteBuild

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

//shadowJar {
//    // Only shade dependencies not provided by Minecraft/FAPI/FLoader
//    configurations = [project.configurations.shade]
//
//    //Exclude META-INF entries of shaded deps
//    exclude('META-INF/**', '**/*.pdn','**/*.bbmodel')
//
//    from("LICENSE") {
//        rename { "${it}_${project.archivesBaseName}" }
//    }
//
//    destinationDirectory = file("${buildDir}/tmp/allJar")
//}

//prepareRemapJar {
//    dependsOn shadowJar
//}

//remapJar {
//    input = shadowJar.archiveFile
//}


tasks.named('test', Test) {
    useJUnitPlatform()

    maxHeapSize = '1G'

    testLogging {
        events "passed"
    }
}
sourcesJar.dependsOn(copyViteBuild)